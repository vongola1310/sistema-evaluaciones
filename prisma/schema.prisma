// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  password              String
  role                  String                 @default("evaluador")
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  
  evaluations           Evaluation[]           @relation("EvaluatorEvaluations")
  reports               WeeklyReport[]         @relation("EvaluatorReports")
  notifications         Notification[]
  commercialEvaluations CommercialEvaluation[] @relation("EvaluatorCommercialEvaluations")
}

model Employee {
  id                    Int                    @id @default(autoincrement())
  firstName             String
  lastName              String
  employeeNo            String                 @unique
  role                  String                 @default("evaluado")
  userId                String?                @unique
  
  opportunities         Opportunity[]
  reports               WeeklyReport[]
  commercialEvaluations CommercialEvaluation[]
}

model WeeklyReport {
  id            Int          @id @default(autoincrement())
  startDate     DateTime
  endDate       DateTime
  totalScore    Int
  possibleScore Int
  averageScore  Float
  rubrica       String
  createdAt     DateTime     @default(now())
  isSent        Boolean      @default(false)
  
  employeeId    Int
  employee      Employee     @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  
  evaluatorId   String
  evaluator     User         @relation("EvaluatorReports", fields: [evaluatorId], references: [id])
  
  evaluations   Evaluation[]
}

model Evaluation {
  id                       Int           @id @default(autoincrement())
  scoreRaw                 Int
  possibleScore            Int
  createdAt                DateTime      @default(now())
  
  opportunityId            Int
  opportunity              Opportunity   @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  
  evaluatorId              String
  evaluator                User          @relation("EvaluatorEvaluations", fields: [evaluatorId], references: [id])
  
  weeklyReportId           Int?
  weeklyReport             WeeklyReport? @relation(fields: [weeklyReportId], references: [id])

  updatedDate              String
  correctPriceQty          String
  quoteUploaded            String
  description              String
  recentFollowUp           String
  correctStage             String
  realisticChance          String
  nextStepsDefined         String
  contactAssigned          String
  commentsUpdated          String
  
  updatedDateComment       String?
  correctPriceQtyComment   String?
  quoteUploadedComment     String?
  descriptionComment       String?
  recentFollowUpComment    String?
  correctStageComment      String?
  realisticChanceComment   String?
  nextStepsDefinedComment  String?
  contactAssignedComment   String?
  commentsUpdatedComment   String?
}

model Opportunity {
  id          Int          @id @default(autoincrement())
  number      String       @unique
  name        String
  state       String       @default("abierta")
  createdAt   DateTime     @default(now())
  closedAt    DateTime?
  daysOpen    Int?
  
  employeeId  Int
  employee    Employee     @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  
  evaluations Evaluation[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  link      String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CommercialEvaluation {
  id                               Int      @id @default(autoincrement())
  createdAt                        DateTime @default(now())
  
  evaluationDate                   DateTime
  quarter                          Int
  year                             Int
  
  salesGoalObjective               Float?
  salesGoalAchieved                Float?
  salesGoalPonderedScore           Float?

  activityObjective                Float?
  activityAchieved                 Float?
  activityPonderedScore            Float?

  creationObjective                Float?
  creationAchieved                 Float?
  creationPonderedScore            Float?

  conversionObjective              Float?
  conversionAchieved               Float?
  conversionPonderedScore          Float?

  crmObjective                     Float?
  crmAchieved                      Float?
  crmPonderedScore                 Float?

  extraPoints                      Float?

  totalScore                       Float?

  rubrica                          String?

  employeeId                       Int
  employee                         Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  
  evaluatorId                      String
  evaluator                        User     @relation("EvaluatorCommercialEvaluations", fields: [evaluatorId], references: [id])
}